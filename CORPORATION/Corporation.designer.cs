#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CORPORATION
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Corporation")]
	public partial class CorporationDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPayment(Payment instance);
    partial void UpdatePayment(Payment instance);
    partial void DeletePayment(Payment instance);
    partial void InsertProductOrder(ProductOrder instance);
    partial void UpdateProductOrder(ProductOrder instance);
    partial void DeleteProductOrder(ProductOrder instance);
    partial void InsertPlantInvoice(PlantInvoice instance);
    partial void UpdatePlantInvoice(PlantInvoice instance);
    partial void DeletePlantInvoice(PlantInvoice instance);
    partial void InsertTruck(Truck instance);
    partial void UpdateTruck(Truck instance);
    partial void DeleteTruck(Truck instance);
    partial void InsertTransInvoice(TransInvoice instance);
    partial void UpdateTransInvoice(TransInvoice instance);
    partial void DeleteTransInvoice(TransInvoice instance);
    partial void InsertTankFuelPayment(TankFuelPayment instance);
    partial void UpdateTankFuelPayment(TankFuelPayment instance);
    partial void DeleteTankFuelPayment(TankFuelPayment instance);
    partial void InsertTransOrder(TransOrder instance);
    partial void UpdateTransOrder(TransOrder instance);
    partial void DeleteTransOrder(TransOrder instance);
    partial void InsertTruckTrip(TruckTrip instance);
    partial void UpdateTruckTrip(TruckTrip instance);
    partial void DeleteTruckTrip(TruckTrip instance);
    partial void InsertBankTransaction(BankTransaction instance);
    partial void UpdateBankTransaction(BankTransaction instance);
    partial void DeleteBankTransaction(BankTransaction instance);
    partial void InsertTankFuelInvoice(TankFuelInvoice instance);
    partial void UpdateTankFuelInvoice(TankFuelInvoice instance);
    partial void DeleteTankFuelInvoice(TankFuelInvoice instance);
    partial void InsertTankFuelOrder(TankFuelOrder instance);
    partial void UpdateTankFuelOrder(TankFuelOrder instance);
    partial void DeleteTankFuelOrder(TankFuelOrder instance);
    #endregion
		
		public CorporationDataContext() : 
				base(global::CORPORATION.Properties.Settings.Default.CorporationConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CorporationDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CorporationDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CorporationDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CorporationDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Payment> Payments
		{
			get
			{
				return this.GetTable<Payment>();
			}
		}
		
		public System.Data.Linq.Table<ProductOrder> ProductOrders
		{
			get
			{
				return this.GetTable<ProductOrder>();
			}
		}
		
		public System.Data.Linq.Table<PlantInvoice> PlantInvoices
		{
			get
			{
				return this.GetTable<PlantInvoice>();
			}
		}
		
		public System.Data.Linq.Table<Truck> Trucks
		{
			get
			{
				return this.GetTable<Truck>();
			}
		}
		
		public System.Data.Linq.Table<TransInvoice> TransInvoices
		{
			get
			{
				return this.GetTable<TransInvoice>();
			}
		}
		
		public System.Data.Linq.Table<TankFuelPayment> TankFuelPayments
		{
			get
			{
				return this.GetTable<TankFuelPayment>();
			}
		}
		
		public System.Data.Linq.Table<TransOrder> TransOrders
		{
			get
			{
				return this.GetTable<TransOrder>();
			}
		}
		
		public System.Data.Linq.Table<TruckTrip> TruckTrips
		{
			get
			{
				return this.GetTable<TruckTrip>();
			}
		}
		
		public System.Data.Linq.Table<BankTransaction> BankTransactions
		{
			get
			{
				return this.GetTable<BankTransaction>();
			}
		}
		
		public System.Data.Linq.Table<TankFuelInvoice> TankFuelInvoices
		{
			get
			{
				return this.GetTable<TankFuelInvoice>();
			}
		}
		
		public System.Data.Linq.Table<TankFuelOrder> TankFuelOrders
		{
			get
			{
				return this.GetTable<TankFuelOrder>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Payments")]
	public partial class Payment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PaymentID;
		
		private System.Nullable<int> _MProdOrderID;
		
		private System.Nullable<int> _TankFuelOrderID;
		
		private string _Status;
		
		private System.Nullable<System.DateTime> _Date;
		
		private EntitySet<BankTransaction> _BankTransactions;
		
		private EntityRef<ProductOrder> _ProductOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPaymentIDChanging(int value);
    partial void OnPaymentIDChanged();
    partial void OnMProdOrderIDChanging(System.Nullable<int> value);
    partial void OnMProdOrderIDChanged();
    partial void OnTankFuelOrderIDChanging(System.Nullable<int> value);
    partial void OnTankFuelOrderIDChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    #endregion
		
		public Payment()
		{
			this._BankTransactions = new EntitySet<BankTransaction>(new Action<BankTransaction>(this.attach_BankTransactions), new Action<BankTransaction>(this.detach_BankTransactions));
			this._ProductOrder = default(EntityRef<ProductOrder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PaymentID
		{
			get
			{
				return this._PaymentID;
			}
			set
			{
				if ((this._PaymentID != value))
				{
					this.OnPaymentIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentID = value;
					this.SendPropertyChanged("PaymentID");
					this.OnPaymentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MProdOrderID", DbType="Int")]
		public System.Nullable<int> MProdOrderID
		{
			get
			{
				return this._MProdOrderID;
			}
			set
			{
				if ((this._MProdOrderID != value))
				{
					if (this._ProductOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMProdOrderIDChanging(value);
					this.SendPropertyChanging();
					this._MProdOrderID = value;
					this.SendPropertyChanged("MProdOrderID");
					this.OnMProdOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TankFuelOrderID", DbType="Int")]
		public System.Nullable<int> TankFuelOrderID
		{
			get
			{
				return this._TankFuelOrderID;
			}
			set
			{
				if ((this._TankFuelOrderID != value))
				{
					this.OnTankFuelOrderIDChanging(value);
					this.SendPropertyChanging();
					this._TankFuelOrderID = value;
					this.SendPropertyChanged("TankFuelOrderID");
					this.OnTankFuelOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NChar(10)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Payment_BankTransaction", Storage="_BankTransactions", ThisKey="PaymentID", OtherKey="PaymentID")]
		public EntitySet<BankTransaction> BankTransactions
		{
			get
			{
				return this._BankTransactions;
			}
			set
			{
				this._BankTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductOrder_Payment", Storage="_ProductOrder", ThisKey="MProdOrderID", OtherKey="MProdOrderID", IsForeignKey=true)]
		public ProductOrder ProductOrder
		{
			get
			{
				return this._ProductOrder.Entity;
			}
			set
			{
				ProductOrder previousValue = this._ProductOrder.Entity;
				if (((previousValue != value) 
							|| (this._ProductOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductOrder.Entity = null;
						previousValue.Payments.Remove(this);
					}
					this._ProductOrder.Entity = value;
					if ((value != null))
					{
						value.Payments.Add(this);
						this._MProdOrderID = value.MProdOrderID;
					}
					else
					{
						this._MProdOrderID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductOrder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BankTransactions(BankTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Payment = this;
		}
		
		private void detach_BankTransactions(BankTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Payment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductOrders")]
	public partial class ProductOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MProdOrderID;
		
		private string _Status;
		
		private System.Nullable<int> _PaymentTerm;
		
		private System.Nullable<decimal> _ProdOrderValue;
		
		private System.Nullable<System.DateTime> _OrderDate;
		
		private string _InvoiceIssued;
		
		private EntitySet<Payment> _Payments;
		
		private EntitySet<PlantInvoice> _PlantInvoices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMProdOrderIDChanging(int value);
    partial void OnMProdOrderIDChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnPaymentTermChanging(System.Nullable<int> value);
    partial void OnPaymentTermChanged();
    partial void OnProdOrderValueChanging(System.Nullable<decimal> value);
    partial void OnProdOrderValueChanged();
    partial void OnOrderDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOrderDateChanged();
    partial void OnInvoiceIssuedChanging(string value);
    partial void OnInvoiceIssuedChanged();
    #endregion
		
		public ProductOrder()
		{
			this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
			this._PlantInvoices = new EntitySet<PlantInvoice>(new Action<PlantInvoice>(this.attach_PlantInvoices), new Action<PlantInvoice>(this.detach_PlantInvoices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MProdOrderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MProdOrderID
		{
			get
			{
				return this._MProdOrderID;
			}
			set
			{
				if ((this._MProdOrderID != value))
				{
					this.OnMProdOrderIDChanging(value);
					this.SendPropertyChanging();
					this._MProdOrderID = value;
					this.SendPropertyChanged("MProdOrderID");
					this.OnMProdOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentTerm", DbType="Int")]
		public System.Nullable<int> PaymentTerm
		{
			get
			{
				return this._PaymentTerm;
			}
			set
			{
				if ((this._PaymentTerm != value))
				{
					this.OnPaymentTermChanging(value);
					this.SendPropertyChanging();
					this._PaymentTerm = value;
					this.SendPropertyChanged("PaymentTerm");
					this.OnPaymentTermChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProdOrderValue", DbType="Money")]
		public System.Nullable<decimal> ProdOrderValue
		{
			get
			{
				return this._ProdOrderValue;
			}
			set
			{
				if ((this._ProdOrderValue != value))
				{
					this.OnProdOrderValueChanging(value);
					this.SendPropertyChanging();
					this._ProdOrderValue = value;
					this.SendPropertyChanged("ProdOrderValue");
					this.OnProdOrderValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceIssued", DbType="NChar(10)")]
		public string InvoiceIssued
		{
			get
			{
				return this._InvoiceIssued;
			}
			set
			{
				if ((this._InvoiceIssued != value))
				{
					this.OnInvoiceIssuedChanging(value);
					this.SendPropertyChanging();
					this._InvoiceIssued = value;
					this.SendPropertyChanged("InvoiceIssued");
					this.OnInvoiceIssuedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductOrder_Payment", Storage="_Payments", ThisKey="MProdOrderID", OtherKey="MProdOrderID")]
		public EntitySet<Payment> Payments
		{
			get
			{
				return this._Payments;
			}
			set
			{
				this._Payments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductOrder_PlantInvoice", Storage="_PlantInvoices", ThisKey="MProdOrderID", OtherKey="MProdOrderID")]
		public EntitySet<PlantInvoice> PlantInvoices
		{
			get
			{
				return this._PlantInvoices;
			}
			set
			{
				this._PlantInvoices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.ProductOrder = this;
		}
		
		private void detach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.ProductOrder = null;
		}
		
		private void attach_PlantInvoices(PlantInvoice entity)
		{
			this.SendPropertyChanging();
			entity.ProductOrder = this;
		}
		
		private void detach_PlantInvoices(PlantInvoice entity)
		{
			this.SendPropertyChanging();
			entity.ProductOrder = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlantInvoices")]
	public partial class PlantInvoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlantInviceID;
		
		private string _Status;
		
		private int _MProdOrderID;
		
		private System.Nullable<System.DateTime> _Date;
		
		private EntitySet<BankTransaction> _BankTransactions;
		
		private EntityRef<ProductOrder> _ProductOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlantInviceIDChanging(int value);
    partial void OnPlantInviceIDChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnMProdOrderIDChanging(int value);
    partial void OnMProdOrderIDChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    #endregion
		
		public PlantInvoice()
		{
			this._BankTransactions = new EntitySet<BankTransaction>(new Action<BankTransaction>(this.attach_BankTransactions), new Action<BankTransaction>(this.detach_BankTransactions));
			this._ProductOrder = default(EntityRef<ProductOrder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlantInviceID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PlantInviceID
		{
			get
			{
				return this._PlantInviceID;
			}
			set
			{
				if ((this._PlantInviceID != value))
				{
					this.OnPlantInviceIDChanging(value);
					this.SendPropertyChanging();
					this._PlantInviceID = value;
					this.SendPropertyChanged("PlantInviceID");
					this.OnPlantInviceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MProdOrderID", DbType="Int NOT NULL")]
		public int MProdOrderID
		{
			get
			{
				return this._MProdOrderID;
			}
			set
			{
				if ((this._MProdOrderID != value))
				{
					if (this._ProductOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMProdOrderIDChanging(value);
					this.SendPropertyChanging();
					this._MProdOrderID = value;
					this.SendPropertyChanged("MProdOrderID");
					this.OnMProdOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlantInvoice_BankTransaction", Storage="_BankTransactions", ThisKey="PlantInviceID", OtherKey="PlantInvoiceID")]
		public EntitySet<BankTransaction> BankTransactions
		{
			get
			{
				return this._BankTransactions;
			}
			set
			{
				this._BankTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductOrder_PlantInvoice", Storage="_ProductOrder", ThisKey="MProdOrderID", OtherKey="MProdOrderID", IsForeignKey=true)]
		public ProductOrder ProductOrder
		{
			get
			{
				return this._ProductOrder.Entity;
			}
			set
			{
				ProductOrder previousValue = this._ProductOrder.Entity;
				if (((previousValue != value) 
							|| (this._ProductOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductOrder.Entity = null;
						previousValue.PlantInvoices.Remove(this);
					}
					this._ProductOrder.Entity = value;
					if ((value != null))
					{
						value.PlantInvoices.Add(this);
						this._MProdOrderID = value.MProdOrderID;
					}
					else
					{
						this._MProdOrderID = default(int);
					}
					this.SendPropertyChanged("ProductOrder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BankTransactions(BankTransaction entity)
		{
			this.SendPropertyChanging();
			entity.PlantInvoice = this;
		}
		
		private void detach_BankTransactions(BankTransaction entity)
		{
			this.SendPropertyChanging();
			entity.PlantInvoice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Trucks")]
	public partial class Truck : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TruckID;
		
		private string _Status;
		
		private EntitySet<TransInvoice> _TransInvoices;
		
		private EntitySet<TruckTrip> _TruckTrips;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTruckIDChanging(int value);
    partial void OnTruckIDChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public Truck()
		{
			this._TransInvoices = new EntitySet<TransInvoice>(new Action<TransInvoice>(this.attach_TransInvoices), new Action<TransInvoice>(this.detach_TransInvoices));
			this._TruckTrips = new EntitySet<TruckTrip>(new Action<TruckTrip>(this.attach_TruckTrips), new Action<TruckTrip>(this.detach_TruckTrips));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TruckID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TruckID
		{
			get
			{
				return this._TruckID;
			}
			set
			{
				if ((this._TruckID != value))
				{
					this.OnTruckIDChanging(value);
					this.SendPropertyChanging();
					this._TruckID = value;
					this.SendPropertyChanged("TruckID");
					this.OnTruckIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NChar(10)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Truck_TransInvoice", Storage="_TransInvoices", ThisKey="TruckID", OtherKey="TruckID")]
		public EntitySet<TransInvoice> TransInvoices
		{
			get
			{
				return this._TransInvoices;
			}
			set
			{
				this._TransInvoices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Truck_TruckTrip", Storage="_TruckTrips", ThisKey="TruckID", OtherKey="TruckID")]
		public EntitySet<TruckTrip> TruckTrips
		{
			get
			{
				return this._TruckTrips;
			}
			set
			{
				this._TruckTrips.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransInvoices(TransInvoice entity)
		{
			this.SendPropertyChanging();
			entity.Truck = this;
		}
		
		private void detach_TransInvoices(TransInvoice entity)
		{
			this.SendPropertyChanging();
			entity.Truck = null;
		}
		
		private void attach_TruckTrips(TruckTrip entity)
		{
			this.SendPropertyChanging();
			entity.Truck = this;
		}
		
		private void detach_TruckTrips(TruckTrip entity)
		{
			this.SendPropertyChanging();
			entity.Truck = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransInvoices")]
	public partial class TransInvoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TransInvoiceID;
		
		private int _TruckID;
		
		private System.Nullable<int> _PaymentTerm;
		
		private string _Status;
		
		private System.Nullable<System.DateTime> _Date;
		
		private EntitySet<BankTransaction> _BankTransactions;
		
		private EntityRef<Truck> _Truck;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransInvoiceIDChanging(int value);
    partial void OnTransInvoiceIDChanged();
    partial void OnTruckIDChanging(int value);
    partial void OnTruckIDChanged();
    partial void OnPaymentTermChanging(System.Nullable<int> value);
    partial void OnPaymentTermChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    #endregion
		
		public TransInvoice()
		{
			this._BankTransactions = new EntitySet<BankTransaction>(new Action<BankTransaction>(this.attach_BankTransactions), new Action<BankTransaction>(this.detach_BankTransactions));
			this._Truck = default(EntityRef<Truck>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransInvoiceID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TransInvoiceID
		{
			get
			{
				return this._TransInvoiceID;
			}
			set
			{
				if ((this._TransInvoiceID != value))
				{
					this.OnTransInvoiceIDChanging(value);
					this.SendPropertyChanging();
					this._TransInvoiceID = value;
					this.SendPropertyChanged("TransInvoiceID");
					this.OnTransInvoiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TruckID", DbType="Int NOT NULL")]
		public int TruckID
		{
			get
			{
				return this._TruckID;
			}
			set
			{
				if ((this._TruckID != value))
				{
					if (this._Truck.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTruckIDChanging(value);
					this.SendPropertyChanging();
					this._TruckID = value;
					this.SendPropertyChanged("TruckID");
					this.OnTruckIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentTerm", DbType="Int")]
		public System.Nullable<int> PaymentTerm
		{
			get
			{
				return this._PaymentTerm;
			}
			set
			{
				if ((this._PaymentTerm != value))
				{
					this.OnPaymentTermChanging(value);
					this.SendPropertyChanging();
					this._PaymentTerm = value;
					this.SendPropertyChanged("PaymentTerm");
					this.OnPaymentTermChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NChar(10)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransInvoice_BankTransaction", Storage="_BankTransactions", ThisKey="TransInvoiceID", OtherKey="TransInvoiceID")]
		public EntitySet<BankTransaction> BankTransactions
		{
			get
			{
				return this._BankTransactions;
			}
			set
			{
				this._BankTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Truck_TransInvoice", Storage="_Truck", ThisKey="TruckID", OtherKey="TruckID", IsForeignKey=true)]
		public Truck Truck
		{
			get
			{
				return this._Truck.Entity;
			}
			set
			{
				Truck previousValue = this._Truck.Entity;
				if (((previousValue != value) 
							|| (this._Truck.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Truck.Entity = null;
						previousValue.TransInvoices.Remove(this);
					}
					this._Truck.Entity = value;
					if ((value != null))
					{
						value.TransInvoices.Add(this);
						this._TruckID = value.TruckID;
					}
					else
					{
						this._TruckID = default(int);
					}
					this.SendPropertyChanged("Truck");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BankTransactions(BankTransaction entity)
		{
			this.SendPropertyChanging();
			entity.TransInvoice = this;
		}
		
		private void detach_BankTransactions(BankTransaction entity)
		{
			this.SendPropertyChanging();
			entity.TransInvoice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TankFuelPayments")]
	public partial class TankFuelPayment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FuelPaymentID;
		
		private string _Status;
		
		private System.Nullable<System.DateTime> _Date;
		
		private int _FuelPaymentAmount;
		
		private System.Nullable<decimal> _FuelPaymentValue;
		
		private EntitySet<BankTransaction> _BankTransactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFuelPaymentIDChanging(int value);
    partial void OnFuelPaymentIDChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnFuelPaymentAmountChanging(int value);
    partial void OnFuelPaymentAmountChanged();
    partial void OnFuelPaymentValueChanging(System.Nullable<decimal> value);
    partial void OnFuelPaymentValueChanged();
    #endregion
		
		public TankFuelPayment()
		{
			this._BankTransactions = new EntitySet<BankTransaction>(new Action<BankTransaction>(this.attach_BankTransactions), new Action<BankTransaction>(this.detach_BankTransactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelPaymentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FuelPaymentID
		{
			get
			{
				return this._FuelPaymentID;
			}
			set
			{
				if ((this._FuelPaymentID != value))
				{
					this.OnFuelPaymentIDChanging(value);
					this.SendPropertyChanging();
					this._FuelPaymentID = value;
					this.SendPropertyChanged("FuelPaymentID");
					this.OnFuelPaymentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NChar(10)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelPaymentAmount", DbType="Int NOT NULL")]
		public int FuelPaymentAmount
		{
			get
			{
				return this._FuelPaymentAmount;
			}
			set
			{
				if ((this._FuelPaymentAmount != value))
				{
					this.OnFuelPaymentAmountChanging(value);
					this.SendPropertyChanging();
					this._FuelPaymentAmount = value;
					this.SendPropertyChanged("FuelPaymentAmount");
					this.OnFuelPaymentAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelPaymentValue", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> FuelPaymentValue
		{
			get
			{
				return this._FuelPaymentValue;
			}
			set
			{
				if ((this._FuelPaymentValue != value))
				{
					this.OnFuelPaymentValueChanging(value);
					this.SendPropertyChanging();
					this._FuelPaymentValue = value;
					this.SendPropertyChanged("FuelPaymentValue");
					this.OnFuelPaymentValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TankFuelPayment_BankTransaction", Storage="_BankTransactions", ThisKey="FuelPaymentID", OtherKey="FuelPaymentID")]
		public EntitySet<BankTransaction> BankTransactions
		{
			get
			{
				return this._BankTransactions;
			}
			set
			{
				this._BankTransactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BankTransactions(BankTransaction entity)
		{
			this.SendPropertyChanging();
			entity.TankFuelPayment = this;
		}
		
		private void detach_BankTransactions(BankTransaction entity)
		{
			this.SendPropertyChanging();
			entity.TankFuelPayment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransOrders")]
	public partial class TransOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TransOrderID;
		
		private System.Nullable<int> _Distance;
		
		private string _Status;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<decimal> _OrderValue;
		
		private string _Attribute;
		
		private EntitySet<TruckTrip> _TruckTrips;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransOrderIDChanging(int value);
    partial void OnTransOrderIDChanged();
    partial void OnDistanceChanging(System.Nullable<int> value);
    partial void OnDistanceChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnOrderValueChanging(System.Nullable<decimal> value);
    partial void OnOrderValueChanged();
    partial void OnAttributeChanging(string value);
    partial void OnAttributeChanged();
    #endregion
		
		public TransOrder()
		{
			this._TruckTrips = new EntitySet<TruckTrip>(new Action<TruckTrip>(this.attach_TruckTrips), new Action<TruckTrip>(this.detach_TruckTrips));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransOrderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TransOrderID
		{
			get
			{
				return this._TransOrderID;
			}
			set
			{
				if ((this._TransOrderID != value))
				{
					this.OnTransOrderIDChanging(value);
					this.SendPropertyChanging();
					this._TransOrderID = value;
					this.SendPropertyChanged("TransOrderID");
					this.OnTransOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Distance", DbType="Int")]
		public System.Nullable<int> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this.OnDistanceChanging(value);
					this.SendPropertyChanging();
					this._Distance = value;
					this.SendPropertyChanged("Distance");
					this.OnDistanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NChar(10)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderValue", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> OrderValue
		{
			get
			{
				return this._OrderValue;
			}
			set
			{
				if ((this._OrderValue != value))
				{
					this.OnOrderValueChanging(value);
					this.SendPropertyChanging();
					this._OrderValue = value;
					this.SendPropertyChanged("OrderValue");
					this.OnOrderValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Attribute", DbType="NChar(10)")]
		public string Attribute
		{
			get
			{
				return this._Attribute;
			}
			set
			{
				if ((this._Attribute != value))
				{
					this.OnAttributeChanging(value);
					this.SendPropertyChanging();
					this._Attribute = value;
					this.SendPropertyChanged("Attribute");
					this.OnAttributeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransOrder_TruckTrip", Storage="_TruckTrips", ThisKey="TransOrderID", OtherKey="TransOrderID")]
		public EntitySet<TruckTrip> TruckTrips
		{
			get
			{
				return this._TruckTrips;
			}
			set
			{
				this._TruckTrips.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TruckTrips(TruckTrip entity)
		{
			this.SendPropertyChanging();
			entity.TransOrder = this;
		}
		
		private void detach_TruckTrips(TruckTrip entity)
		{
			this.SendPropertyChanging();
			entity.TransOrder = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TruckTrips")]
	public partial class TruckTrip : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TruckTripID;
		
		private System.Nullable<int> _TransOrderID;
		
		private System.Nullable<int> _TruckID;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _Status;
		
		private EntityRef<Truck> _Truck;
		
		private EntityRef<TransOrder> _TransOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTruckTripIDChanging(int value);
    partial void OnTruckTripIDChanged();
    partial void OnTransOrderIDChanging(System.Nullable<int> value);
    partial void OnTransOrderIDChanged();
    partial void OnTruckIDChanging(System.Nullable<int> value);
    partial void OnTruckIDChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public TruckTrip()
		{
			this._Truck = default(EntityRef<Truck>);
			this._TransOrder = default(EntityRef<TransOrder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TruckTripID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TruckTripID
		{
			get
			{
				return this._TruckTripID;
			}
			set
			{
				if ((this._TruckTripID != value))
				{
					this.OnTruckTripIDChanging(value);
					this.SendPropertyChanging();
					this._TruckTripID = value;
					this.SendPropertyChanged("TruckTripID");
					this.OnTruckTripIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransOrderID", DbType="Int")]
		public System.Nullable<int> TransOrderID
		{
			get
			{
				return this._TransOrderID;
			}
			set
			{
				if ((this._TransOrderID != value))
				{
					if (this._TransOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransOrderIDChanging(value);
					this.SendPropertyChanging();
					this._TransOrderID = value;
					this.SendPropertyChanged("TransOrderID");
					this.OnTransOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TruckID", DbType="Int")]
		public System.Nullable<int> TruckID
		{
			get
			{
				return this._TruckID;
			}
			set
			{
				if ((this._TruckID != value))
				{
					if (this._Truck.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTruckIDChanging(value);
					this.SendPropertyChanging();
					this._TruckID = value;
					this.SendPropertyChanged("TruckID");
					this.OnTruckIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Truck_TruckTrip", Storage="_Truck", ThisKey="TruckID", OtherKey="TruckID", IsForeignKey=true)]
		public Truck Truck
		{
			get
			{
				return this._Truck.Entity;
			}
			set
			{
				Truck previousValue = this._Truck.Entity;
				if (((previousValue != value) 
							|| (this._Truck.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Truck.Entity = null;
						previousValue.TruckTrips.Remove(this);
					}
					this._Truck.Entity = value;
					if ((value != null))
					{
						value.TruckTrips.Add(this);
						this._TruckID = value.TruckID;
					}
					else
					{
						this._TruckID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Truck");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransOrder_TruckTrip", Storage="_TransOrder", ThisKey="TransOrderID", OtherKey="TransOrderID", IsForeignKey=true)]
		public TransOrder TransOrder
		{
			get
			{
				return this._TransOrder.Entity;
			}
			set
			{
				TransOrder previousValue = this._TransOrder.Entity;
				if (((previousValue != value) 
							|| (this._TransOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransOrder.Entity = null;
						previousValue.TruckTrips.Remove(this);
					}
					this._TransOrder.Entity = value;
					if ((value != null))
					{
						value.TruckTrips.Add(this);
						this._TransOrderID = value.TransOrderID;
					}
					else
					{
						this._TransOrderID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TransOrder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BankTransactions")]
	public partial class BankTransaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TransactionID;
		
		private System.Nullable<int> _PlantInvoiceID;
		
		private System.Nullable<int> _PaymentID;
		
		private System.Nullable<int> _TankFuelInvoiceID;
		
		private System.Nullable<int> _TransInvoiceID;
		
		private string _Confirmed;
		
		private string _Status;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<int> _FuelPaymentID;
		
		private System.Nullable<int> _TransPaymentID;
		
		private EntityRef<PlantInvoice> _PlantInvoice;
		
		private EntityRef<Payment> _Payment;
		
		private EntityRef<TankFuelPayment> _TankFuelPayment;
		
		private EntityRef<TransInvoice> _TransInvoice;
		
		private EntityRef<TankFuelInvoice> _TankFuelInvoice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransactionIDChanging(int value);
    partial void OnTransactionIDChanged();
    partial void OnPlantInvoiceIDChanging(System.Nullable<int> value);
    partial void OnPlantInvoiceIDChanged();
    partial void OnPaymentIDChanging(System.Nullable<int> value);
    partial void OnPaymentIDChanged();
    partial void OnTankFuelInvoiceIDChanging(System.Nullable<int> value);
    partial void OnTankFuelInvoiceIDChanged();
    partial void OnTransInvoiceIDChanging(System.Nullable<int> value);
    partial void OnTransInvoiceIDChanged();
    partial void OnConfirmedChanging(string value);
    partial void OnConfirmedChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnFuelPaymentIDChanging(System.Nullable<int> value);
    partial void OnFuelPaymentIDChanged();
    partial void OnTransPaymentIDChanging(System.Nullable<int> value);
    partial void OnTransPaymentIDChanged();
    #endregion
		
		public BankTransaction()
		{
			this._PlantInvoice = default(EntityRef<PlantInvoice>);
			this._Payment = default(EntityRef<Payment>);
			this._TankFuelPayment = default(EntityRef<TankFuelPayment>);
			this._TransInvoice = default(EntityRef<TransInvoice>);
			this._TankFuelInvoice = default(EntityRef<TankFuelInvoice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TransactionID
		{
			get
			{
				return this._TransactionID;
			}
			set
			{
				if ((this._TransactionID != value))
				{
					this.OnTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._TransactionID = value;
					this.SendPropertyChanged("TransactionID");
					this.OnTransactionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlantInvoiceID", DbType="Int")]
		public System.Nullable<int> PlantInvoiceID
		{
			get
			{
				return this._PlantInvoiceID;
			}
			set
			{
				if ((this._PlantInvoiceID != value))
				{
					if (this._PlantInvoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlantInvoiceIDChanging(value);
					this.SendPropertyChanging();
					this._PlantInvoiceID = value;
					this.SendPropertyChanged("PlantInvoiceID");
					this.OnPlantInvoiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentID", DbType="Int")]
		public System.Nullable<int> PaymentID
		{
			get
			{
				return this._PaymentID;
			}
			set
			{
				if ((this._PaymentID != value))
				{
					if (this._Payment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentID = value;
					this.SendPropertyChanged("PaymentID");
					this.OnPaymentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TankFuelInvoiceID", DbType="Int")]
		public System.Nullable<int> TankFuelInvoiceID
		{
			get
			{
				return this._TankFuelInvoiceID;
			}
			set
			{
				if ((this._TankFuelInvoiceID != value))
				{
					if (this._TankFuelInvoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTankFuelInvoiceIDChanging(value);
					this.SendPropertyChanging();
					this._TankFuelInvoiceID = value;
					this.SendPropertyChanged("TankFuelInvoiceID");
					this.OnTankFuelInvoiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransInvoiceID", DbType="Int")]
		public System.Nullable<int> TransInvoiceID
		{
			get
			{
				return this._TransInvoiceID;
			}
			set
			{
				if ((this._TransInvoiceID != value))
				{
					if (this._TransInvoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransInvoiceIDChanging(value);
					this.SendPropertyChanging();
					this._TransInvoiceID = value;
					this.SendPropertyChanged("TransInvoiceID");
					this.OnTransInvoiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Confirmed", DbType="NChar(10)")]
		public string Confirmed
		{
			get
			{
				return this._Confirmed;
			}
			set
			{
				if ((this._Confirmed != value))
				{
					this.OnConfirmedChanging(value);
					this.SendPropertyChanging();
					this._Confirmed = value;
					this.SendPropertyChanged("Confirmed");
					this.OnConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NChar(10)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelPaymentID", DbType="Int")]
		public System.Nullable<int> FuelPaymentID
		{
			get
			{
				return this._FuelPaymentID;
			}
			set
			{
				if ((this._FuelPaymentID != value))
				{
					if (this._TankFuelPayment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFuelPaymentIDChanging(value);
					this.SendPropertyChanging();
					this._FuelPaymentID = value;
					this.SendPropertyChanged("FuelPaymentID");
					this.OnFuelPaymentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransPaymentID", DbType="Int")]
		public System.Nullable<int> TransPaymentID
		{
			get
			{
				return this._TransPaymentID;
			}
			set
			{
				if ((this._TransPaymentID != value))
				{
					this.OnTransPaymentIDChanging(value);
					this.SendPropertyChanging();
					this._TransPaymentID = value;
					this.SendPropertyChanged("TransPaymentID");
					this.OnTransPaymentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlantInvoice_BankTransaction", Storage="_PlantInvoice", ThisKey="PlantInvoiceID", OtherKey="PlantInviceID", IsForeignKey=true)]
		public PlantInvoice PlantInvoice
		{
			get
			{
				return this._PlantInvoice.Entity;
			}
			set
			{
				PlantInvoice previousValue = this._PlantInvoice.Entity;
				if (((previousValue != value) 
							|| (this._PlantInvoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlantInvoice.Entity = null;
						previousValue.BankTransactions.Remove(this);
					}
					this._PlantInvoice.Entity = value;
					if ((value != null))
					{
						value.BankTransactions.Add(this);
						this._PlantInvoiceID = value.PlantInviceID;
					}
					else
					{
						this._PlantInvoiceID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PlantInvoice");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Payment_BankTransaction", Storage="_Payment", ThisKey="PaymentID", OtherKey="PaymentID", IsForeignKey=true)]
		public Payment Payment
		{
			get
			{
				return this._Payment.Entity;
			}
			set
			{
				Payment previousValue = this._Payment.Entity;
				if (((previousValue != value) 
							|| (this._Payment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Payment.Entity = null;
						previousValue.BankTransactions.Remove(this);
					}
					this._Payment.Entity = value;
					if ((value != null))
					{
						value.BankTransactions.Add(this);
						this._PaymentID = value.PaymentID;
					}
					else
					{
						this._PaymentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Payment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TankFuelPayment_BankTransaction", Storage="_TankFuelPayment", ThisKey="FuelPaymentID", OtherKey="FuelPaymentID", IsForeignKey=true)]
		public TankFuelPayment TankFuelPayment
		{
			get
			{
				return this._TankFuelPayment.Entity;
			}
			set
			{
				TankFuelPayment previousValue = this._TankFuelPayment.Entity;
				if (((previousValue != value) 
							|| (this._TankFuelPayment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TankFuelPayment.Entity = null;
						previousValue.BankTransactions.Remove(this);
					}
					this._TankFuelPayment.Entity = value;
					if ((value != null))
					{
						value.BankTransactions.Add(this);
						this._FuelPaymentID = value.FuelPaymentID;
					}
					else
					{
						this._FuelPaymentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TankFuelPayment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransInvoice_BankTransaction", Storage="_TransInvoice", ThisKey="TransInvoiceID", OtherKey="TransInvoiceID", IsForeignKey=true)]
		public TransInvoice TransInvoice
		{
			get
			{
				return this._TransInvoice.Entity;
			}
			set
			{
				TransInvoice previousValue = this._TransInvoice.Entity;
				if (((previousValue != value) 
							|| (this._TransInvoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransInvoice.Entity = null;
						previousValue.BankTransactions.Remove(this);
					}
					this._TransInvoice.Entity = value;
					if ((value != null))
					{
						value.BankTransactions.Add(this);
						this._TransInvoiceID = value.TransInvoiceID;
					}
					else
					{
						this._TransInvoiceID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TransInvoice");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TankFuelInvoice_BankTransaction", Storage="_TankFuelInvoice", ThisKey="TankFuelInvoiceID", OtherKey="TankFuelInvoiceID", IsForeignKey=true)]
		public TankFuelInvoice TankFuelInvoice
		{
			get
			{
				return this._TankFuelInvoice.Entity;
			}
			set
			{
				TankFuelInvoice previousValue = this._TankFuelInvoice.Entity;
				if (((previousValue != value) 
							|| (this._TankFuelInvoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TankFuelInvoice.Entity = null;
						previousValue.BankTransactions.Remove(this);
					}
					this._TankFuelInvoice.Entity = value;
					if ((value != null))
					{
						value.BankTransactions.Add(this);
						this._TankFuelInvoiceID = value.TankFuelInvoiceID;
					}
					else
					{
						this._TankFuelInvoiceID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TankFuelInvoice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TankFuelInvoices")]
	public partial class TankFuelInvoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TankFuelInvoiceID;
		
		private System.Nullable<int> _TankFuelOrderID;
		
		private string _Status;
		
		private System.Nullable<System.DateTime> _Date;
		
		private EntitySet<BankTransaction> _BankTransactions;
		
		private EntityRef<TankFuelOrder> _TankFuelOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTankFuelInvoiceIDChanging(int value);
    partial void OnTankFuelInvoiceIDChanged();
    partial void OnTankFuelOrderIDChanging(System.Nullable<int> value);
    partial void OnTankFuelOrderIDChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    #endregion
		
		public TankFuelInvoice()
		{
			this._BankTransactions = new EntitySet<BankTransaction>(new Action<BankTransaction>(this.attach_BankTransactions), new Action<BankTransaction>(this.detach_BankTransactions));
			this._TankFuelOrder = default(EntityRef<TankFuelOrder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TankFuelInvoiceID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TankFuelInvoiceID
		{
			get
			{
				return this._TankFuelInvoiceID;
			}
			set
			{
				if ((this._TankFuelInvoiceID != value))
				{
					this.OnTankFuelInvoiceIDChanging(value);
					this.SendPropertyChanging();
					this._TankFuelInvoiceID = value;
					this.SendPropertyChanged("TankFuelInvoiceID");
					this.OnTankFuelInvoiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TankFuelOrderID", DbType="Int")]
		public System.Nullable<int> TankFuelOrderID
		{
			get
			{
				return this._TankFuelOrderID;
			}
			set
			{
				if ((this._TankFuelOrderID != value))
				{
					if (this._TankFuelOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTankFuelOrderIDChanging(value);
					this.SendPropertyChanging();
					this._TankFuelOrderID = value;
					this.SendPropertyChanged("TankFuelOrderID");
					this.OnTankFuelOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NChar(10)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TankFuelInvoice_BankTransaction", Storage="_BankTransactions", ThisKey="TankFuelInvoiceID", OtherKey="TankFuelInvoiceID")]
		public EntitySet<BankTransaction> BankTransactions
		{
			get
			{
				return this._BankTransactions;
			}
			set
			{
				this._BankTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TankFuelOrder_TankFuelInvoice", Storage="_TankFuelOrder", ThisKey="TankFuelOrderID", OtherKey="TankFuelOrderID", IsForeignKey=true)]
		public TankFuelOrder TankFuelOrder
		{
			get
			{
				return this._TankFuelOrder.Entity;
			}
			set
			{
				TankFuelOrder previousValue = this._TankFuelOrder.Entity;
				if (((previousValue != value) 
							|| (this._TankFuelOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TankFuelOrder.Entity = null;
						previousValue.TankFuelInvoices.Remove(this);
					}
					this._TankFuelOrder.Entity = value;
					if ((value != null))
					{
						value.TankFuelInvoices.Add(this);
						this._TankFuelOrderID = value.TankFuelOrderID;
					}
					else
					{
						this._TankFuelOrderID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TankFuelOrder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BankTransactions(BankTransaction entity)
		{
			this.SendPropertyChanging();
			entity.TankFuelInvoice = this;
		}
		
		private void detach_BankTransactions(BankTransaction entity)
		{
			this.SendPropertyChanging();
			entity.TankFuelInvoice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TankFuelOrders")]
	public partial class TankFuelOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TankFuelOrderID;
		
		private System.Nullable<int> _TankFuelOrderAmount;
		
		private System.Nullable<decimal> _TankFuelOrderValue;
		
		private string _Status;
		
		private System.Nullable<System.DateTime> _Date;
		
		private EntitySet<TankFuelInvoice> _TankFuelInvoices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTankFuelOrderIDChanging(int value);
    partial void OnTankFuelOrderIDChanged();
    partial void OnTankFuelOrderAmountChanging(System.Nullable<int> value);
    partial void OnTankFuelOrderAmountChanged();
    partial void OnTankFuelOrderValueChanging(System.Nullable<decimal> value);
    partial void OnTankFuelOrderValueChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    #endregion
		
		public TankFuelOrder()
		{
			this._TankFuelInvoices = new EntitySet<TankFuelInvoice>(new Action<TankFuelInvoice>(this.attach_TankFuelInvoices), new Action<TankFuelInvoice>(this.detach_TankFuelInvoices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TankFuelOrderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TankFuelOrderID
		{
			get
			{
				return this._TankFuelOrderID;
			}
			set
			{
				if ((this._TankFuelOrderID != value))
				{
					this.OnTankFuelOrderIDChanging(value);
					this.SendPropertyChanging();
					this._TankFuelOrderID = value;
					this.SendPropertyChanged("TankFuelOrderID");
					this.OnTankFuelOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TankFuelOrderAmount", DbType="Int")]
		public System.Nullable<int> TankFuelOrderAmount
		{
			get
			{
				return this._TankFuelOrderAmount;
			}
			set
			{
				if ((this._TankFuelOrderAmount != value))
				{
					this.OnTankFuelOrderAmountChanging(value);
					this.SendPropertyChanging();
					this._TankFuelOrderAmount = value;
					this.SendPropertyChanged("TankFuelOrderAmount");
					this.OnTankFuelOrderAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TankFuelOrderValue", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> TankFuelOrderValue
		{
			get
			{
				return this._TankFuelOrderValue;
			}
			set
			{
				if ((this._TankFuelOrderValue != value))
				{
					this.OnTankFuelOrderValueChanging(value);
					this.SendPropertyChanging();
					this._TankFuelOrderValue = value;
					this.SendPropertyChanged("TankFuelOrderValue");
					this.OnTankFuelOrderValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NChar(10)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TankFuelOrder_TankFuelInvoice", Storage="_TankFuelInvoices", ThisKey="TankFuelOrderID", OtherKey="TankFuelOrderID")]
		public EntitySet<TankFuelInvoice> TankFuelInvoices
		{
			get
			{
				return this._TankFuelInvoices;
			}
			set
			{
				this._TankFuelInvoices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TankFuelInvoices(TankFuelInvoice entity)
		{
			this.SendPropertyChanging();
			entity.TankFuelOrder = this;
		}
		
		private void detach_TankFuelInvoices(TankFuelInvoice entity)
		{
			this.SendPropertyChanging();
			entity.TankFuelOrder = null;
		}
	}
}
#pragma warning restore 1591
